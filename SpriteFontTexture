using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public struct SpriteFontTexture
{
    public RenderTexture renderTexture;
    public Texture2D texture2d;

    public SpriteFontTexture(string text, Sprite[] spriteArray, int asciiStart, int letterSeperation, bool createTexture2DInstead)
    {
        renderTexture = null;
        texture2d = null;
        int textureWidth = 0;
        int textureHeight = 0;
        int xPositionInTexture = 0;

        //Calculate the texture width and height
        foreach (char _char in text)
        {
            int ascii = System.Convert.ToInt32(_char);
            Sprite sprite = spriteArray[ascii - asciiStart];

            textureWidth += (int)sprite.rect.width + letterSeperation;
            textureHeight = Mathf.Max(textureHeight, (int)sprite.rect.height);

            if (letterSeperation < 0)
                textureWidth += Mathf.Abs(letterSeperation);
        }

        //Create render texture
        renderTexture = new RenderTexture(textureWidth, textureHeight, 16, RenderTextureFormat.ARGB32);
        renderTexture.filterMode = FilterMode.Point;
        renderTexture.Create();

        //Prepare drawing to texture
        RenderTexture.active = renderTexture;

        GL.PushMatrix();
        GL.LoadPixelMatrix(0, textureWidth, textureHeight, 0);

        //Draw to render texture
        foreach (char _char in text)
        {
            int ascii = System.Convert.ToInt32(_char);
            Sprite sprite = spriteArray[ascii - asciiStart];

            Graphics.DrawTexture(new Rect(xPositionInTexture, 0, sprite.rect.width, sprite.rect.height), sprite.texture, new Rect(sprite.rect.x / sprite.texture.width, sprite.rect.y / sprite.texture.height, sprite.rect.width / sprite.texture.width, sprite.rect.height / sprite.texture.height), 0, 0, 0, 0);
            xPositionInTexture += (int)sprite.rect.width + letterSeperation;
        }

        //Create texture2d if necessary
        if (createTexture2DInstead)
        {
            texture2d = new Texture2D(textureWidth, textureHeight);
            texture2d.filterMode = FilterMode.Point;
            texture2d.ReadPixels(new Rect(0, 0, textureWidth, textureHeight), 0, 0);
            texture2d.Apply();
        }

        //End drawing to texture
        GL.PopMatrix();
        RenderTexture.active = null;

        //Delete render texture if only texture2d is wanted
        if (createTexture2DInstead)
            renderTexture.Release();
    }
}
